#!/bin/bash
self_script_path=$(realpath "${BASH_SOURCE[0]}")
self_script_dir=$(dirname "$self_script_path")
admin_script_path="$self_script_path.real"
cygwin_root=$(cygpath -w "/")

# helper functions

function strindex() {
	local str="$1"
	local find_str="$2"
	local start_index=$3
	if [ ! -z "$start_index"]; then
		str="${str:$start_index}"
	fi
	local x="${str%%"$find_str"*}"
	if [[ "$x" = "$str" ]]; then
		echo -1
	elif [ ! -z "$start_index" ]; then
		echo $(($start_index + ${#x}))
	else
		echo ${#x}
	fi
}

function resolve_script() {
	script_name="$1"
	script_path="$self_script_dir/$script_name"
	if [ -f "$script_path" ]; then
		echo "$script_path"
		return 0
	else
		if which "$script_name"; then
			echo "$script_name"
			return 0
		else
			echo ""
			return 1
		fi
	fi
}

function string_index_in_array() {
	local index=0
	local str_to_find="$1"
	shift
	for entry in "$@"; do
		if $verbose; then
			>&2 echo "checking $entry at $index"
		fi
		if [ "$entry" == "$str_to_find" ]; then
			echo $index
			return
		fi
		index=$((index+1))
	done
	echo -1
}

function parse_bool_arg() {
	val="$1"
	if [ "$val" -eq 0 ] || [ "$val" = "false" ] || [ "$val" = "no"]; then
		echo "false"
	elif [ "$val" -eq 1 ] || [ "$val" = "true" ] || [ "$val" = "yes" ]; then
		echo "true"
	elif [ "$2" = "strict" ]; then
		>&2 echo "invalid boolean $val"
		echo "false"
		return 1
	else
		echo "$val"
	fi
}

# get paths for dependent scripts
mintty_path=$(cygpath -w "$(which mintty)")
batch_escaper_name="escape-batch-param.bat"
batch_escaper_path=$(resolve_script "$batch_escaper_name")
amiadmin_name="amiadmin"
amiadmin_path=$(resolve_script "$amiadmin_name")

# create random string to help prevent clashing with other sudo calls
cmd_id=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | head -c 16)

# set default values for options
verbose=false
test_mode=false
wait_on_finish=false
stdin_mode="none"
stdin_modes=( "none" "pipe" "file" )
sleep_duration="0.1s"
tail_interval="0.05"
with_mintty=false
force_sudo=false

# parse arguments
param_count=0
while (( $# > 0 )); do
	param_count=$((param_count+1))
	arg="$1"
	trimmed_arg="${arg#"${arg%%[![:space:]]*}"}"
	trimmed_arg="${trimmed_arg%"${trimmed_arg##*[![:space:]]}"}"
	# ignore empty parameter
	if [ -z "$trimmed_arg" ]; then
		>&2 echo "ignoring empty parameter at position $param_count"
		shift
		continue
	fi
	# parse flags
	if [[ "$arg" == --* ]]; then
		# parse named flag
		flag="${arg:2}"
		if [ -z "$flag" ]; then
			# argument was -- so stop parsing arguments
			shift
			break
		fi
		# check for value
		eq_index=$(strindex "$flag" "=")
		if [ "$eq_index" -eq -1 ]; then
			flag_name="$flag"
			has_flag_val=false
			flag_val=
		else
			flag_name="${flag:0:$eq_index}"
			has_flag_val=true
			flag_val="${flag:(($eq_index+1))}"
		fi
		if [ "$flag_name" = "verbose" ]; then
			if $has_flag_val; then
				verbose="$(parse_bool_arg "$flag_val" 'strict')"
			else
				verbose=true
			fi
		elif [ "$flag_name" = "test" ]; then
			if $has_flag_val; then
				test_mode="$(parse_bool_arg "$flag_val")"
			else
				test_mode=true
			fi
		elif [ "$flag_name" = "force" ]; then
			if $has_flag_val; then
				force_sudo="$(parse_bool_arg "$flag_val")"
			else
				force_sudo=true
			fi
		elif [ "$flag_name" = "wait-on-finish" ]; then
			if $has_flag_val; then
				wait_on_finish="$(parse_bool_arg "$flag_val")"
			else
				wait_on_finish=true
			fi
		elif [ "$flag_name" = "stdin-mode" ]; then
			if ! $has_flag_val; then
				>&2 echo "missing value for flag $arg"
				exit 1
			elif [ $( string_index_in_array "$flag_val" "${stdin_modes[@]}" ) -eq -1 ]; then
				>&2 echo "invalid stdin mode $flag_val"
				exit 1
			else
				stdin_mode="$flag_val"
			fi
		elif [ "$flag_name" = "with-mintty" ]; then
			if $has_flag_val; then
				with_mintty="$(parse_bool_arg "$flag_val")"
			else
				with_mintty=true
			fi
		else
			>&2 echo "unknown argument '$arg'"
			exit 1
		fi
	elif [[ "$arg" == -* ]]; then
		# parse single character flags
		arg_len=${#arg}
		if [ $arg_len -gt 1 ]; then
			for ((i = 1 ; i < arg_len ; i++ )); do
				flag="${arg:$i:1}"
				if [ "$flag" = "v" ]; then
					verbose=true
				else
					>&2 echo "unknown flag '$flag'"
					exit 1
				fi
			done
		else
			# got empty flag, so stop parsing arguments
			>&2 echo "unused empty flag '$arg'"
			exit 1
		fi
	else
		# reached the command section of the arguments
		break
	fi
	shift
done

# ensure a command was given
if [ -z "$1" ]; then
	>&2 echo "no command was given"
	exit 1
fi

# check if we even need to elevate privileges for this task
if ! $force_sudo && [ ! -z "$amiadmin_path" ]; then
	is_admin_state=$(amiadmin)
	if $verbose; then
		>&2 echo "amiadmin?: $is_admin_state"
	fi
	if [ "$is_admin_state" == "yes" ]; then
		# already admin, so just call the command and exit
		"$@"
		exit $?
	fi
fi

# make a multiline string of the variables to pass
passvars_arg="cmd_id=\"$cmd_id\" verbose=\"$verbose\" test_mode=\"$test_mode\" wait_on_finish=\"$wait_on_finish\" stdin_mode=\"$stdin_mode\""
if $verbose; then
	>&2 echo "passed variables argument is:"
	>&2 echo $'\t'"$passvars_arg"
fi

# escape command + arguments
esc_args=()
esc_args+=( "$(printf "%q" "$admin_script_path")" )
esc_args+=( "$( printf "%q" "$passvars_arg" )" )
for arg in "$@"
do
	esc_arg=$( printf "%q" "$arg" )
	esc_args+=( "$esc_arg" )
done
command=$(echo "${esc_args[*]}")
if $verbose; then
	>&2 echo "joined command (before escaping) is:"
	>&2 echo $'\t'"$command"
fi
if [ -z "$batch_escaper_path" ]; then
	>&2 echo "Couldn't find $batch_escaper_name to escape shell parameters"
	exit 1
fi
command=$("$batch_escaper_path" "$command")

# echo command if in test mode
if $test_mode; then
	>&2 echo "the following command would be executed:"
	>&2 echo $'\t'"$command"
	exit
fi

# tail the command's stdout and stderr
pid_path="/tmp/cygsudo_cmd_pid_$cmd_id"
stdin_path="/tmp/cygsudo_cmd_stdin_$cmd_id"
stdout_path="/tmp/cygsudo_cmd_stdout_$cmd_id.log"
stderr_path="/tmp/cygsudo_cmd_stderr_$cmd_id.log"
result_path="/tmp/cygsudo_cmd_result_$cmd_id"
if [ "$stdin_mode" == "file" ]; then
	touch "$stdin_path"
fi
touch "$stdout_path"
touch "$stderr_path"
if $verbose; then
	>&2 echo "created temporary files to tail for stdout and stderr"
	>&2 echo "stdin file is $stdin_path"
	>&2 echo "stdout file is $stdout_path"
	>&2 echo "stderr file is $stderr_path"
fi
tail -f -s "$tail_interval" -n +1 "$stdout_path" &
tail_s_pid=$!
if $verbose; then
	>&2 echo "tailing temporary stdout file $stdout_path (tail pid is $tail_s_pid)"
fi
tail -f -s "$tail_interval" -n +1 "$stderr_path" 1>&2 &
tail_e_pid=$!
if $verbose; then
	>&2 echo "tailing temporary stderr file $stderr_path (tail pid is $tail_e_pid)"
fi

# pipe stdin to chosen destination if needed
if [ "$stdin_mode" == "file" ]; then
	{ stdbuf -o0 cat - <&3 3<&- 1>"$stdin_path" 2>/dev/null & } 3<&0
fi

# run command
cygstart_args=()
if $verbose; then
	cygstart_args+=( "--verbose" )
	>&2 echo "running command via cygstart:"
	>&2 echo $'\t'"$command"
fi
if $with_mintty; then
	cygstart --wait --directory "$PWD" $cygstart_args --action=runas "$mintty_path" -i /Cygwin-Terminal.ico --dir "" --exec "/bin/sh" -c "$command"
	cygstart_result=$?
else
	cygstart --wait --directory "$PWD" $cygstart_args --action=runas "$cygwin_root\\bin\\sh" -c "$command"
	cygstart_result=$?
fi
if $verbose; then
	>&2 echo "cygstart exited with result $cygstart_result"
fi

# check if cygstart was successful
if [ $cygstart_result -eq 0 ]; then
	# wait for pid if needed
	if $with_mintty; then
		if $verbose; then
			>&2 echo "waiting for pid in temporary file $pid_path"
		fi
		while [ ! -f "$pid_path" ]
		do
			sleep "$sleep_duration"
		done
		pid=$(cat "$pid_path")
	fi

	# wait for command result
	if $verbose; then
		>&2 echo "waiting for command result in temporary file $result_path"
	fi
	while [ ! -f "$result_path" ]
	do
		sleep "$sleep_duration"
	done
fi

# close stdin if needed
if [ "$stdin_mode" == "file" ]; then
	exec 0<&-
fi

# command has finished
if [ $cygstart_result -eq 0 ]; then
	cmd_result=$(cat "$result_path")
	if $verbose; then
		>&2 echo "finished command with result $cmd_result"
		>&2 echo "deleting temporary result file"
	fi
	rm -rf "$result_path"
else
	cmd_result=$cygstart_result
fi

# stop tailing stdout and stderr of command
sleep "$sleep_duration"
kill -15 $tail_s_pid &> /dev/null
wait $tail_s_pid &> /dev/null
kill -15 $tail_e_pid &> /dev/null
wait $tail_e_pid &> /dev/null

# delete stdout and stderr files
if $verbose; then
	>&2 echo "deleting temporary pid, stdin, stdout, and stderr files"
fi
rm -rf "$pid_path" "$stdin_path" "$stdout_path" "$stderr_path"

# exit
exit $cmd_result
